{"version":3,"file":"index.js","sources":["../src/build-config.ts","../src/index.ts"],"sourcesContent":["const path = require('path')\n\nenum FontFormat {\n  ttf = 'ttf',\n  svg = 'svg',\n  eot = 'eot',\n  woff = 'woff',\n  woff2 = 'woff2'\n}\n\nexport interface SVGIcon2FontConfig {\n  entry: string,\n  output: string,\n  iconCssFileName?: string,\n  fontName: string,\n  iconPrefix?: string,\n  inline?: boolean,\n  formats?: FontFormat[],\n  startUnicode?: number,\n}\n\nconst defaultConfig: SVGIcon2FontConfig = {\n  entry: path.join(__dirname, '../icons'),\n  output: path.join(__dirname, '../css'),\n  iconCssFileName: 'icon.css',\n  fontName: 'iconfont',\n  iconPrefix: '',\n  inline: true,\n  formats: [FontFormat.ttf],\n  startUnicode: 0xea01,\n}\n\nexport default function (config: SVGIcon2FontConfig) {\n  return Object.assign({}, config, defaultConfig)\n}\n","import fs from 'fs'\nimport path from 'path'\nimport SVGIcons2SVGFontStream from 'svgicons2svgfont'\nimport svg2ttf from 'svg2ttf'\nimport { SVGIcon2FontConfig } from './build-config'\nimport buildConfig from './build-config'\n\ninterface IconItem {\n  name: string,\n  path: string,\n  unicode: string[],\n  hexCode: string\n}\n\nconst iconRegexp = /(.svg)$/\n\nclass SVGIcon2Font {\n  config: SVGIcon2FontConfig\n\n  constructor (initinalConfig: SVGIcon2FontConfig) {\n    const config = buildConfig(initinalConfig)\n    this.config = config\n  }\n\n  getIconList (): IconItem[] {\n    return fs.readdirSync(this.config.entry).filter((fileName: string) => iconRegexp.test(fileName)).map((fileName: string, i: number) => {\n      let iconCode = this.config.startUnicode! + i;\n      return {\n        name: fileName.replace(iconRegexp, ''),\n        path: path.join(this.config.entry, fileName),\n        unicode: [String.fromCharCode(iconCode)],\n        hexCode: `\\\\${iconCode.toString(16)}`\n      }\n    })\n  }\n\n  generateIconFontFace (svgIconBuffer: Buffer) {\n    let fontName = this.config.fontName\n    return `@font-face {\n  font-family: \"${fontName}\";\n  src: url(data:application/x-font-ttf;base64,${this.generateTTFBuffer(svgIconBuffer).toString('base64')}) format('truetype');\n}\n\n.${fontName}-icon {\n  font-family: \"${fontName}\" !important;\n  font-size: 16px;\n  font-style: normal;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}`\n  }\n\n  generateSvgIcon (iconList: IconItem[]): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      const svgFontStream = new SVGIcons2SVGFontStream({\n        fontName: this.config.fontName\n      })\n      let generateSvgIconPath = path.join(__filename, '../svgicon.svg')\n      svgFontStream.pipe(fs.createWriteStream(generateSvgIconPath))\n        .on('finish', function () {\n          console.log('Font successfully created!')\n          resolve(fs.readFileSync(generateSvgIconPath))\n        })\n        .on('error', function (err: any) {\n          console.log(err);\n          reject(err)\n        });\n\n      iconList.forEach((icon: IconItem) => {\n        const glyph = fs.createReadStream(icon.path) as any\n        glyph.metadata = {\n          name: icon.name,\n          unicode: icon.unicode\n        }\n        svgFontStream.write(glyph)\n      })\n      svgFontStream.end()\n    })\n  }\n\n  generateTTFBuffer (svgIcon: Buffer) {\n    const ttf = svg2ttf(svgIcon.toString('utf8'), {})\n    return Buffer.from(ttf.buffer)\n  }\n\n  generateIconListCssStr (iconList: IconItem[]) {\n    let iconPrefix = this.config.iconPrefix ? `${this.config.iconPrefix}-` : ''\n    return iconList.map((icon: IconItem) => {\n      return `.${iconPrefix}${icon.name}::before {\n  content: \"${icon.hexCode}\";\n}`\n    }).join('\\n\\n')\n  }\n\n  writeCssFile (fontFace: string, fontListCss: string) {\n    if (!fs.existsSync(this.config.output)) {\n      fs.mkdirSync(this.config.output)\n    }\n    fs.writeFileSync(path.join(this.config.output, this.config.iconCssFileName!), fontFace.concat('\\n\\n', fontListCss))\n  }\n}\n\nexport default function (initinalConfig: SVGIcon2FontConfig) {\n  let svgIcon2Font = new SVGIcon2Font(initinalConfig)\n  let iconList = svgIcon2Font.getIconList();\n  svgIcon2Font.generateSvgIcon(iconList).then((svgIconBuffer: Buffer) => {\n    let fontFace = svgIcon2Font.generateIconFontFace(svgIconBuffer)\n    let fontList = svgIcon2Font.generateIconListCssStr(iconList)\n    console.log(fontFace, fontList)\n    svgIcon2Font.writeCssFile(fontFace, fontList)\n  })\n}\n"],"names":["path"],"mappings":"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"}